# Dockerfile
FROM nvidia/opengl:base-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive

# Create needed directories
RUN mkdir -p /home/roahmlab/path_ws/src
RUN mkdir -p /home/roahmlab/src

RUN apt-get update && apt-get install -y \
    software-properties-common \
    nano \
    python3-yaml \
    git \
    python3 \
    python3-pip \
    curl \
    wget \
    sudo \
    locales \
    lsb-release \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*


RUN locale-gen en_US en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    export LANG=en_US.UTF-8

RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository universe && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" \
    | tee /etc/apt/sources.list.d/ros2.list > /dev/null

RUN apt-get update && apt-get install -y \
    ros-foxy-desktop \
    python3-colcon-common-extensions \
    python3-argcomplete \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    ros-foxy-urdfdom \
    ros-foxy-urdfdom-headers \
    ros-foxy-urdf \
    && rm -rf /var/lib/apt/lists/*

ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8
ENV ROS_DISTRO=foxy
ENV ROS_ROOT=/opt/ros/$ROS_DISTRO
ENV ROS_PYTHON_VERSION=3
ENV PATH=$ROS_ROOT/bin:$PATH
ENV LD_LIBRARY_PATH=$ROS_ROOT/lib:$LD_LIBRARY_PATH
ENV PYTHONPATH=$ROS_ROOT/lib/python3.8/site-packages:$PYTHONPATH
ENV CMAKE_PREFIX_PATH=$ROS_ROOT:$CMAKE_PREFIX_PATH

RUN echo "source /opt/ros/foxy/setup.bash" >> /root/.bashrc
# RUN /bin/bash -c "source /opt/ros/foxy/setup.bash && colcon build"

RUN apt-get update && apt-get install -y \
  libbullet-dev \
  python3-pytest-cov \
  libasio-dev \
  libtinyxml2-dev libcunit1-dev

WORKDIR /home/roahmlab/src
# kortex_api
RUN git clone https://github.com/Kinovarobotics/kortex.git
RUN wget "https://artifactory.kinovaapps.com/ui/api/v1/download?repoKey=generic-public&path=kortex%252FAPI%252F2.6.0%252Fkortex_api-2.6.0.post3-py3-none-any.whl&isNativeBrowsing=false" -O /tmp/kortex_api-2.6.0.post3-py3-none-any.whl && python3 -m pip install /tmp/kortex_api-2.6.0.post3-py3-none-any.whl
#RUN git clone https://github.com/ParkerEwen5441/roahm_kinova.git # now part of the main repo

RUN sudo apt-get update && sudo apt-get install -y \
    libbullet-dev \
    libasio-dev \
    libtinyxml2-dev \
    libcunit1-dev \
    libspdlog-dev \
    nlohmann-json3-dev \
    && sudo rm -rf /var/lib/apt/lists/*
RUN ln -s /usr/lib/x86_64-linux-gnu/libtinyxml2.so.6 /usr/lib/libtinyxml2.so.6

#Setup 
RUN python3 -m pip install conan==1.59
RUN /bin/bash -c "source /opt/ros/foxy/setup.bash && \
    conan config set general.revisions_enabled=1 && \
    conan profile new default --detect && \
    conan profile update settings.compiler.libcxx=libstdc++11 default"
# ENV PATH=$PATH:/home/roahmlab/.local/bin
# RUN  /bin/bash -c "conan config set general.revisions_enabled=1 && conan profile new default --detect > /dev/null && conan profile update settings.compiler.libcxx=libstdc++11 default"
# # WORKDIR /home/roahmlab/catkin_workspace/src
# WORKDIR /home/roahmlab/src

# install some pip packages needed for testing
RUN python3 -m pip install -U \
  argcomplete \
  flake8-blind-except \
  flake8-builtins \
  flake8-class-newline \
  flake8-comprehensions \
  flake8-deprecated \
  flake8-docstrings \
  flake8-import-order \
  flake8-quotes \
  pytest-repeat \
  pytest-rerunfailures \
  pytest \
  pybind11

  RUN echo "export CONAN_REVISIONS_ENABLED=1" >> /root/.bashrc && echo "source /opt/ros/foxy/setup.bash" >> /root/.bashrc

RUN apt-get update && apt-get install -y \
    libgflags-dev \
    libgoogle-glog-dev \
    libusb-1.0-0-dev \
    libeigen3-dev \
    uuid-dev \
    pkg-config \
    ninja-build \
    doxygen \
    clang \
    gcc-multilib \
    g++-multilib \
    python3 \
    nasm \
    libgl1-mesa-dev \
    libsoundio-dev \
    libvulkan-dev \
    libx11-dev \
    libxcursor-dev \
    libxinerama-dev \
    libxrandr-dev \
    libssl-dev \
    libudev-dev \
    mesa-common-dev \
    python3-dev \
    python3-venv \
    python3-pip \
    python3-opencv\
    ros-foxy-pybind11-vendor

# Set CMAKE_PREFIX_PATH for pybind11
# ENV CMAKE_PREFIX_PATH="/usr/local/lib/python3.8/dist-packages/pybind11/share/cmake/pybind11:${CMAKE_PREFIX_PATH}"
# WORKDIR /home/roahmlab/src/OrbbecSDK-K4A-Wrapper
# RUN export LD_LIBRARY_PATH=/home/roahmlab/src/OrbbecSDK-K4A-Wrapper/build/lib:$LD_LIBRARY_PATH && mkdir -p build && cd build && cmake .. && make -j8 && sudo make install

# WORKDIR /home/roahmlab/src/pyorbbecsdk
# RUN python3 -m venv ./venv && source venv/bin/activate && pip3 install -r requirements.txt & mkdir build && cd build && cmake -Dpybind11_DIR=`pybind11-config --cmakedir` .. && make -j4 && make install
    # Install pinochio dependencies
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=bind,source=install-pinocchio.sh,target=/tmp/install-pinocchio.sh \
    bash /tmp/install-pinocchio.sh

# Install the HSL solver
RUN apt-get update && apt-get install -y unzip 
COPY HSL.zip /home/roahmlab/src
RUN --mount=type=cache,target=/var/cache/apt \
--mount=type=bind,source=install-hsl.sh,target=/tmp/install-hsl.sh \
bash /tmp/install-hsl.sh

# Install the Ipopt solver
RUN --mount=type=cache,target=/var/cache/apt \
--mount=type=bind,source=install-ipopt.sh,target=/tmp/install-ipopt.sh \
bash /tmp/install-ipopt.sh

# # Install the ompl
RUN --mount=type=cache,target=/var/cache/apt \
--mount=type=bind,source=install-ompl.sh,target=/tmp/install-ompl.sh \
bash /tmp/install-ompl.sh

ENV PATH /opt/openrobots/bin:/usr/local/bin:/usr/bin:$PATH
ENV PKG_CONFIG_PATH /opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
ENV LD_LIBRARY_PATH /opt/openrobots/lib:/usr/lib:/usr/lib/x86_64-linux-gnu:/usr/local/lib:/usr/local/share:$LD_LIBRARY_PATH
ENV PYTHONPATH /opt/openrobots/lib/python3.8/site-packages:$PYTHONPATH
ENV CMAKE_PREFIX_PATH /opt/ros/foxy: /usr:/opt/openrobots:/usr/local:/usr/lib/x86_64-linux-gnu/urdfdom/cmake


RUN echo "source /opt/ros/foxy/setup.bash" >> /root/.bashrc

CMD ["/bin/bash"]
